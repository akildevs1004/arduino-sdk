#include <WiFi.h>
#include <ETH.h>
#include <WebServer.h>
#include <LittleFS.h>
#include <ArduinoJson.h>

#define ETH_PHY_ADDR 0
#define ETH_MDC_PIN 23
#define ETH_MDIO_PIN 18
#define ETH_POWER_PIN -1
#define ETH_CLK_MODE ETH_CLOCK_GPIO17_OUT
#define ETH_TYPE ETH_PHY_LAN8720

// Static IP Configuration
IPAddress local_IP = IPAddress();
;
;  //(192, 168, 1, 20);
IPAddress gateway = IPAddress();
;
;  //(192, 168, 1, 1);
IPAddress subnet = IPAddress();
;
;  //(255, 255, 255, 0);
IPAddress primaryDNS(8, 8, 8, 8);
IPAddress secondaryDNS(8, 8, 4, 4);





WebServer server(8080);

// Simple credentials (replace with secure method for production)
const char* USERNAME = "admin";
const char* PASSWORD = "password";
String sessionToken = "";

bool loginStatus = false;
bool USE_ETHERNET = true;


//wifi
// WiFi credentials
String WIFI_SSID = "yourifi";
String WIFI_PASSWORD = "password";

// Static IP Configuration for WiFi
IPAddress wifi_local_IP(192, 168, 1, 100);  // Using .100 as requested
IPAddress wifi_gateway(192, 168, 1, 1);
IPAddress wifi_subnet(255, 255, 255, 0);
IPAddress wifi_primaryDNS(8, 8, 8, 8);
IPAddress wifi_secondaryDNS(8, 8, 4, 4);

bool wifiConnected = false;

void setup() {
  Serial.begin(115200);

  //wifi
 

  // Apply configuration
  if (USE_ETHERNET) {

    //IPAddress local_IP=IPAddress();;
    if (!LittleFS.begin(true)) {
      Serial.println("LittleFS is Not available");

      delay(1000);
    } else {



      String savedData = readConfig("form1_config.json");

      Serial.println(savedData);

      if (savedData != "") {
        DynamicJsonDocument doc(256);
        deserializeJson(doc, savedData);
        String eth_ip = doc["eth_ip"].as<String>();
        String eth_gateway = doc["eth_gateway"].as<String>();
        String eth_subnet = doc["eth_subnet"].as<String>();

        Serial.println(eth_ip);

        local_IP.fromString(eth_ip);
        gateway.fromString(eth_gateway);
        subnet.fromString(eth_subnet);


       
      }
    }





















    Serial.println("LittleFS is available");
    String ip = "192.168.1.22";

    
    Serial.println(local_IP);
    Serial.println("Converted IP ");


    ETH.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS);
 









    // Your existing Ethernet setup code...
    if (!ETH.begin(ETH_TYPE, ETH_PHY_ADDR, ETH_MDC_PIN, ETH_MDIO_PIN, ETH_POWER_PIN, ETH_CLK_MODE)) {
      Serial.println("Ethernet Failed to Start");
    }
    //wifi

    // Initialize LittleFS
    if (!LittleFS.begin(true)) {
      Serial.println("An error occurred while mounting LittleFS");
      return;
    }

    WiFi.onEvent(WiFiEvent);

    if (!ETH.begin(ETH_TYPE, ETH_PHY_ADDR, ETH_MDC_PIN, ETH_MDIO_PIN, ETH_POWER_PIN, ETH_CLK_MODE)) {
      Serial.println("Ethernet Failed to Start");
      return;
    }

    //   if ( ETH.linkStatus()==ETH_LINK_OFF) {
    //   delay(1000);
    // }

    // Apply static IP configuration
    if (!ETH.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
      Serial.println("Failed to configure Ethernet with static IP");
    } else {
      Serial.println("Static IP: ");
      Serial.println(ETH.localIP());
    }
  } else {

    connectWiFiWithStaticIP();
    // WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS);
  }
  // Route handlers
  server.on("/", HTTP_GET, handleLoginPage);
  server.on("/login", HTTP_POST, handleLogin);
  server.on("/logout", HTTP_GET, handleLogout);
  server.on("/form1", HTTP_GET, handleForm1);
  server.on("/form2", HTTP_GET, handleForm2);
  server.on("/submit-form1", HTTP_POST, handleForm1Submit);
  server.on("/submit-form2", HTTP_POST, handleForm2Submit);
  server.on("/styles.css", HTTP_GET, handleCSS);
  server.on("/status", HTTP_GET, handleStatus);
  server.begin();
  Serial.println("HTTP Server started on port 8080");
}

void loop() {
  server.handleClient();

  
}

void connectWiFiWithStaticIP() {




  // WIFI_SSID = "akil";
  //  WIFI_PASSWORD = "Akil1234";
  Serial.println(WIFI_SSID);
  Serial.println("Saved Wifi Details");



  // Configure static IP
  if (!WiFi.config(wifi_local_IP, wifi_gateway, wifi_subnet, wifi_primaryDNS, wifi_secondaryDNS)) {
    Serial.println("Failed to configure WiFi with static IP");
    return;
  }

  // Connect to WiFi network
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");

  unsigned long startAttemptTime = millis();

  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 20000) {
    Serial.print(".");
    delay(500);
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect to WiFi");
  } else {
    Serial.println("\nWiFi connected");
    Serial.print("Static IP address: ");
    Serial.println(WiFi.localIP());
  }
}

// Your existing WiFi event handler
void WiFiEvent(WiFiEvent_t event) {
  Serial.println("WiFi Event Occurred");
  // Add specific event handling if needed
}


// Serve static files from LittleFS
String readFile(String path) {
  File file = LittleFS.open(path);
  if (!file) {
    Serial.println("Failed to open file for reading: " + path);
    return "";
  }
  String content = file.readString();
  file.close();
  return content;
}

// Save data to config file
void saveConfig(String filename, String data) {
  File file = LittleFS.open("/" + filename, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing: " + filename);
    return;
  }
  file.print(data);
  file.close();
  Serial.println("Data saved to " + filename);
}

// Check if user is authenticated
bool isAuthenticated() {


  return loginStatus;


  if (server.hasHeader("Cookie")) {
    String cookie = server.header("Cookie");
    Serial.println("Raw Cookie: " + cookie);  // Debug output

    int tokenIndex = cookie.indexOf("ESPSESSIONID=");
    if (tokenIndex != -1) {
      int endIndex = cookie.indexOf(";", tokenIndex);
      String token = endIndex == -1 ? cookie.substring(tokenIndex + 13) : cookie.substring(tokenIndex + 13, endIndex);

      if (token == sessionToken) {
        Serial.println("Valid session token found");
        return true;
      }
    }
  }
  Serial.println("No valid session token found");
  return false;
}

// Login page
void handleLoginPage() {

  loginStatus = false;

  if (isAuthenticated()) {
    server.sendHeader("Location", "/form1");
    server.send(302);
    return;
  }

  String html = readFile("/login.html");
  if (html == "") {
    html = "<html><body><h2>Login111111111111111</h2><form action='/login' method='POST'>"
           "User:<input type='text' name='user'><br>"
           "Password:<input type='password' name='pass'><br>"
           "<input type='submit' value='Login'></form></body></html>";
  }
  server.send(200, "text/html", html);
}

// Login handler
void handleLogin() {
  String user = server.arg("user");
  String pass = server.arg("pass");

  if (user == USERNAME && pass == PASSWORD) {

    loginStatus = true;
    Serial.println("Login successful");
    server.sendHeader("Location", "/form1");

    server.send(302);
    return;

  } else {
    server.sendHeader("Location", "/?login=failed");
    server.send(302);
    Serial.println("Login failed");
  }
}

// Logout handler
void handleLogout() {
  sessionToken = "";
  String header = "HTTP/1.1 301 OK\r\nSet-Cookie: ESPSESSIONID=0\r\nExpires=Thu, 01 Jan 1970 00:00:00 GMT\r\nLocation: /\r\n\r\n";
  server.sendContent(header);
}

// Form 1
void handleForm1() {
  if (!isAuthenticated()) {
    server.sendHeader("Location", "/");
    server.send(302);
    return;
  }

  String html = readFile("/form1.html");
  if (html == "") {
    html = "<html><head><link rel='stylesheet' href='/styles.css'></head><body>"
           "<h2>Form 1</h2><form action='/submit-form1' method='POST'>"
           "Field 1: <input type='text' name='field1'><br>"
           "Field 2: <input type='text' name='field2'><br>"
           "<input type='submit' value='Submit'></form>"
           "<p><a href='/form2'>Go to Form 2</a></p>"
           "<p><a href='/logout'>Logout</a></p></body></html>";
  }

  // Read saved data
  String savedData = readConfig("form1_config.json");
  String wifi_ssid = "";
  String wifi_password = "";
  String field1Value = "";

  if (savedData != "") {
    DynamicJsonDocument doc(256);
    deserializeJson(doc, savedData);


    html.replace("{wifi_ssid}", doc["wifi_ssid"].as<String>());
    html.replace("{wifi_password}", doc["wifi_password"].as<String>());
    html.replace("{eth_ip}", doc["eth_ip"].as<String>());
    html.replace("{eth_gateway}", doc["eth_gateway"].as<String>());
    html.replace("{eth_subnet}", doc["eth_subnet"].as<String>());
  }

  server.send(200, "text/html", html);
}
String readConfig(String filename) {
  String path = "/" + filename;
  if (!LittleFS.exists(path)) {
    Serial.println("Config file not found: " + path);
    return "";
  }

  File file = LittleFS.open(path, "r");
  String content = file.readString();
  Serial.println("Config file   found Success: ");
  Serial.println(content);

  file.close();
  return content;
}
// Form 2
void handleForm2() {
  if (!isAuthenticated()) {
    server.sendHeader("Location", "/");
    server.send(302);
    return;
  }

  String html = readFile("/form2.html");
  if (html == "") {
    html = "<html><head><link rel='stylesheet' href='/styles.css'></head><body>"
           "<h2>Form 2</h2><form action='/submit-form2' method='POST'>"
           "Field A: <input type='text' name='fieldA'><br>"
           "Field B: <input type='text' name='fieldB'><br>"
           "<input type='submit' value='Submit'></form>"
           "<p><a href='/form1'>Go to Form 1</a></p>"
           "<p><a href='/logout'>Logout</a></p></body></html>";
  }
  server.send(200, "text/html", html);
}

// Handle Form 1 submission
void handleForm1Submit() {
  if (!isAuthenticated()) {
    server.sendHeader("Location", "/");
    server.send(302);
    return;
  }

  DynamicJsonDocument doc(256);
  doc["wifi_ssid"] = server.arg("wifi_ssid");
  doc["wifi_password"] = server.arg("wifi_password");
  doc["eth_ip"] = server.arg("eth_ip");
  doc["eth_gateway"] = server.arg("eth_gateway");

  doc["eth_subnet"] = server.arg("eth_subnet");

  String output;
  serializeJson(doc, output);
  saveConfig("form1_config.json", output);

  server.send(200, "text/plain", "Form 1 data saved successfully");

  handleReset();
}

void handleReset() {
  // if (!isAuthenticated()) {
  //   server.sendHeader("Location", "/");
  //   server.send(302);
  //   return;
  // }

  server.send(200, "text/html", 
    "<html><body>"
    "<h2>System Reset</h2>"
    "<p>Device is restarting...</p>"
    "<meta http-equiv='refresh' content='5;url=/'></body></html>");
  
  Serial.println("Reset requested - restarting device");
  delay(1000); // Give time for response to be sent
  ESP.restart(); // This will call setup() again after reboot
}

// Handle Form 2 submission
void handleForm2Submit() {
  if (!isAuthenticated()) {
    server.sendHeader("Location", "/");
    server.send(302);
    return;
  }

  DynamicJsonDocument doc(256);
  doc["fieldA"] = server.arg("fieldA");
  doc["fieldB"] = server.arg("fieldB");

  String output;
  serializeJson(doc, output);
  saveConfig("form2_config.json", output);

  server.send(200, "text/plain", "Form 2 data saved successfully");
}

// Serve CSS
void handleCSS() {
  String css = readFile("/styles.css");
  if (css == "") {
    css = "body { font-family: Arial, sans-serif; margin: 20px; }"
          "form { margin: 20px 0; }"
          "input { margin: 5px 0; }";
  }
  server.send(200, "text/css", css);
}

String getWiFiStatus() {
  switch (WiFi.status()) {
    case WL_CONNECTED: return "Connected (IP: " + WiFi.localIP().toString() + ")";
    case WL_NO_SSID_AVAIL: return "Network not available";
    case WL_CONNECT_FAILED: return "Connection failed";
    case WL_IDLE_STATUS: return "Idle";
    case WL_DISCONNECTED: return "Disconnected";
    default: return "Unknown status";
  }
}

String getEthernetStatus() {
  return ETH.linkUp() ? "Connected (IP: " + ETH.localIP().toString() + ")" : "Disconnected";
}

bool checkInternet() {
  WiFiClient client;
  return client.connect("www.google.com", 80);
}

String getInternetStatus() {
  return checkInternet() ? "Online" : "Offline";
}

void handleStatus() {
  if (!isAuthenticated()) {
    server.sendHeader("Location", "/");
    server.send(302);
    return;
  }

  String html = "<html><head><title>Network Status</title>";
  html += "<style>body {font-family: Arial; margin: 20px;}";
  html += ".status {padding: 10px; margin: 10px 0; border-radius: 5px;}";
  html += ".online {background-color: #d4edda; color: #155724;}";
  html += ".offline {background-color: #f8d7da; color: #721c24;}";
  html += "</style></head><body>";
  html += "<h1>Network Status</h1>";

  // WiFi Status
  html += "<h2>WiFi</h2>";
  html += "<div class='status ";
  html += (WiFi.status() == WL_CONNECTED ? "online" : "offline");
  html += "'>";
  html += "<strong>Status:</strong> " + getWiFiStatus() + "<br>";
  html += "<strong>SSID:</strong> " + String(WiFi.SSID()) + "<br>";
  html += "<strong>Signal:</strong> " + String(WiFi.RSSI()) + " dBm<br>";
  html += "</div>";

  // Rest of your HTML...
  server.send(200, "text/html", html);
}